Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-09-06T09:54:39.867461

====== RoadMap ======

==== Desktop Java ====
[*] Surface (o.Ä.) erstellen, auf der performante 2D und/oder 3D Grafik ausgegeben werden kann
[*] Eingaben entgegennehmen
	[*] entweder in Form von Maus-, Tastatur- und Touch-Events 
	[x] oder durch Polling der Mauskoordinaten, Maustasten und Keystates
[*] Freitext ausgeben
	[ ] im eigentlichen Spiel (Hitpoints, ...)
	[*] pixelgenau auf einem HUD-Layer (Geld, ...)
[ ] (optional: (asynchrones Abspielen von Soundeffekten))
	[ ] wave/mp3 o.ä.
	[ ] 8-bit-Synthesizer-Stil
[ ] Laden von Grafiken als Textur

==== Android ====
[*] Surface (o.Ä.) erstellen, auf der performante 2D und/oder 3D Grafik ausgegeben werden kann
[*] Eingaben entgegennehmen
	[*] entweder in Form von Maus-, Tastatur- und Touch-Events 
	[x] oder durch Polling der Mauskoordinaten, Maustasten und Keystates
[*] Freitext ausgeben
	[ ] im eigentlichen Spiel (Hitpoints, ...)
	[*] pixelgenau auf einem HUD-Layer (Geld, ...)
[ ] (optional: (asynchrones Abspielen von Soundeffekten))
	[ ] wave/mp3 o.ä.
	[ ] 8-bit-Synthesizer-Stil
[ ] Laden von Grafiken als Textur

==== Windows ====
[x] Platzhalter

===== Niederschreiben =====
[*] Control Flow
[*] Units

===== Game-Engine-Stub =====
[ ] Prototyp einer Engine, die allen Status hält und ihn aktualisiert
	[*] Status pro Ding
		[*] Location :: v2d
		[*] Size (Radius) :: v2d
		[*] Target :: Ding
		[*] Velocity :: v2d
		[*] diversen Ding-Kategorie- und Ding-Instanz-spezifischen Status
	[*] Status von folgenden Dingen
		[x] das Grid
		[*] Liste der Türme
		[*] Liste der Geschosse
		[*] Liste der Monster
		[*] Liste der Wegpunkte
	[*] Aktualisierung
		[*] tick(dt :: float)
[ ] Dokumentation der Abläufe
	[ ] Check gegen Control Flow Artikel
	[ ] Check gegen Units Artikel
[ ] World-Updates per Second (Rechenzeit-Prozent)
[*] Umstellung auf das Standard-Grid von 1000x1000 (?)
[*] Default Target Policy auf "Nearest" ändern

===== Grafik-Engine-Stub =====
[ ] Prototyp einer Grafik-Engine, die Grafik ausgibt und entsprechenden Status hält
	[*] alle Dinge malen
	[*] Desktop: Ausgabe eines Ingame-Debug-Strings als Text auf einem HUD-Layer
	[ ] Android: Ausgabe eines Ingame-Debug-Strings als Text auf einem HUD-Layer
[ ] Objekte um gfx_tick(dt :: float) erweitern
[ ] Objekte um gfx-related Eigenschaft erweitern
	[ ] Farbe
	[ ] Rotation
	[ ] Textur
[x] Objekte um render() erweitern
[ ] Dokumentation der Abläufe
	[ ] Check gegen Control Flow Artikel
	[ ] Check gegen Units Artikel
[*] Frames per Second
[ ] Ingame-Ausgabe von Debug o.Ä. Meldungen

===== erste Design-Entscheidungen =====
[*] Screen-Aufteilung der GUI klären -- nicht technisch sondern Usability-mäßig

===== Zusammenstecken =====
[*] erstellen einer Minimal-Welt per Skript
	[*] createGrid()
	[*] mehrfach: createTower()
	[*] mehrfach: createGeschoss()
	[*] mehrfach: createMonster()
[*] Endlossschleife mit
	[*] tick
	[*] render

===== Infrastruktur =====
[*] Time-Klasse, die Ingame-Time von Wallclock-Time entkoppelt
[*] Pausieren der Ingame-Zeit

===== Interaktion =====
[*] Erstellen von Türmen per Maus/Finger-Klick
[x] Neustart der "Simulation" per Eingabe
[*] Selektieren 
	[*] von Türmen
	[*] von Monstern
[ ] Dokumentation der Abläufe
	[ ] Check gegen Control Flow Artikel
	[ ] Check gegen Units Artikel
[*] Solide Umrechnung zwischen Game- und Screen-Koordinaten

===== Kollission / Spawning =====
[*] Erkennen von Kollission
	[*] Geschoss -- Monster
[*] "Beheben" von Kollissionen
	[ ] Double Dispatch über Geschoss, Monster
	[ ] daraufhin bestimmte Effekte anwenden (Schaden, Tempoänderung, Tod/Geld-Auszahlung, Objekt entfernen ...)
[*] Timerbasiertes "Feuern" von Türmen
	[*] nur falls Ziel vorhanden (weitere Kollissionsabfrage)
[*] Timerbasiertes Spawnen von Monstern
	[*] Spawnen einer Welle von  Monstern
[ ] Dokumentation der Abläufe
	[ ] Check gegen Control Flow Artikel
	[ ] Check gegen Units Artikel
[ ] Geschosse suchen neues Target, wenn aktuelles stirbt (optionales Feature von Türmen)
[ ] Explosions-Animationen

===== Minimal Game =====
[*] Geld
[*] Leben
[*] Punkte
	[ ] Highscore
[*] verschiedene Seitenverhältnisse / Screengrößen / ...
[ ] Game Over

===== Theming =====
[ ] Umstellen auf Prisma TD
	[ ] im Spiel / der GUI
	[ ] in der Doku
	[ ] im Code
[ ] einführen der drei Schadensklassen
[ ] zwei verschiedene Türme um das Konzept auszudrücken
[ ] zwei verschiedene Gegner um das Konzept auszudrücken
[ ] [[Development:Concept]] weiterentwickeln
[ ] [[Development:Concept]] allgemein+verbindlich absegnen
[ ] [[Development:Concept]] umsetzen soweit mit "Alpha" markiert

===== Menü =====
[ ] erste sinnvolle Version des Menüs implementieren
[ ] Überlegung + Mockup, was alles ins Menü soll

===== Usability =====
[ ] Probespiel, ob ein "minimal useful product" vorliegt
[ ] Killer-Usability-Probleme benennen
	[ ] Pause / Resume / State sichern auf Android
	[ ] interner Getting-Started Splash Screen
		[ ] klicke hier um Turm zu bauen
		[ ] klicke hier um Welle zu starten
		[ ] stoppe die Monster vor hier
		[ ] Tipp: baue den ersten Turm hier
	[ ] Neustart des Spiels / Levels

===== Alpha Release =====
[ ] Source / Binary - Download für Linux
	[ ] (optional: (Package))
[ ] APK für Android
[ ] Installations-Anleitung
[ ] externe How-To-Play-Anleitung mit Bildern schreiben
[ ] Dokumentation nachziehen / sortieren
[ ] Lizenz-Header in Quelldateien
[*] Artwork (Launcher Icon) verbessern
[*] Programm-Name (wiedererkennbar, auf Android-Screen darstellbar)
[ ] TODOs im Code durchgehen
[*] nur eine absolut einzige Version von Korrdinaten-Tupel verwenden keine Mischung von Point2d, Vector2d, Velocity, ...
[*] Issue Tracker (launchpad?, trac?, sd?)
[ ] Zim-Export als Webseite
	[ ] wo hosten
[ ] grobes Trial-and-Error Balancing
[*] Weichenstellung Theming / Branding / Alleinstellung
[ ] Liste der (Alpha) Release Critical Bugs erstellen
	[x] ...
[ ] Release Critical Bugs fixen
